const db = require("../database");
const jwt = require('jsonwebtoken');
const fs = require('fs');
const { Storage } = require("@google-cloud/storage");
const storage = new Storage({ keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS });
const bucket = storage.bucket(process.env.BUCKET_NAME);
const { format } = require("util");
const { response } = require("express");

// function decoded
function jwtDecoded(reqCookie) {
  // jwt decode
  const token = reqCookie;
  let id;
  jwt.verify(token, process.env.SECRET_STRING, (err, decoded) => {
    if (err) {
      // Use return res.status(401).json(...) if you have 'res' available here
      // Otherwise, handle the error accordingly
      console.error('Failed to authenticate token', err);
      return;
    }

    // The decoded payload is available in the 'decoded' object
    id = decoded.id;
  });
  return id;
}

// Function to generate a unique filename
function generateUniqueFileName() {
  const timestamp = new Date().toISOString().replace(/[^a-zA-Z0-9]/g, "");
  const uniqueName = `${timestamp}`;
  return uniqueName;
}

// Function premium checking
function premiumCheck(premium) {
  if(premium.isPremium == 1){
    return 1;
  }
  return 0;
}

exports.uploadText = async (req, res) => {
  var { text } = req.body;
  // const user = req.user;
  // logic premium
  var resCharLength;
  if (!premiumCheck(req.user)) {
    const MAX_CHAR = 100;
    if (text.length > MAX_CHAR) {
      text = text.slice(0, MAX_CHAR);
      resCharLength = "Jumlah melebihi 2000 karakter, hanya mengambil 2000 karakter pertama";
    }
  } else {
    resCharLength = "user premium";
  }

  if (!text) {
    return res.status(400).json({
      status: "Gagal",
      message: "Semua ketentuan wajib diisi!",
    });
  }

  // Generate unique name
  const fileName = `${generateUniqueFileName()}.txt`;

  const folderUpload = "uploads";
  const folderOutput = "results";
  const destinationUpload = `${folderUpload}/${fileName}`;
  const destinationOutput = `${folderOutput}/${fileName}`;
  const publicUrl = format(`https://storage.googleapis.com/${destinationUpload}`);
  const textPublicUrl = format(`https://storage.googleapis.com/${destinationOutput}`);

  // Write to txt file
  fs.writeFileSync(fileName, text);

  // Upload file to Google Cloud Storage
  await bucket.upload(`${fileName}`, {
    destination: destinationUpload,
  });

  // copy file uploaded before to folder results
  await bucket.file(destinationUpload).copy(destinationOutput);

  // Delete local file
  fs.unlinkSync(fileName);

  // jwt
  id = jwtDecoded(req.cookies.jwt);

  // Database
  await db.promise().query(`INSERT INTO uploads (raw_file, raw_filename, processed_file, processed_filename, result_file, user_id) VALUES(?, ?, ?, ? , 'generated by ai', ?)`, [publicUrl, fileName, fileName, fileName, id] );

  return res.status(200).send({
    message: "Uploaded the file and extracted text successfully: " + fileName,
    rawUrl: publicUrl,
    processedUrl: textPublicUrl,
    extractedText: text,
    resCharLength: resCharLength,
  });
};
